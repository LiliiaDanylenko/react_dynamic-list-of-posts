{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","setError","useState","loadingSubmit","setLoadingSubmit","name","setName","errorName","setErrorName","email","setEmail","errorEmail","setErrorEmail","commentBody","setCommentBody","errorCommentBody","setErrorCommentBody","emailPattern","onSubmit","event","preventDefault","test","newComment","postId","createComment","gettedComment","currentComments","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","isLoadingComments","error","comments","activeForm","setActiveForm","handleDelete","commentId","filter","currentComment","deleteComment","length","comment","href","UserSelector","users","selectedUser","setSelectedUser","isActiveDropdown","setIsActiveDropdown","dropdownRef","useRef","useEffect","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","App","setUsers","setPosts","errorGetPosts","setErrorGetPosts","isLoadingPosts","setIsLoadingPosts","setIsLoadingComments","errorGetComments","setErrorGetComments","gettedPosts","ReactDOM","render","getElementById"],"mappings":"+QAUaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,aAAcC,EADmB,EACnBA,gBADmB,OAGxC,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,iBACA,CAAE,WAAYR,IAAiBI,IAEjCK,QAAS,kBAEHR,EADJD,IAAiBI,EACG,KACAA,IAVxB,SAaGJ,IAAiBI,EAChB,QAEA,aAxBgBA,EAAKC,gBCzB1BK,G,MAAS,kBACpB,qBAAKR,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,OCHbS,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC1B3Ba,EAAkC,SAAC,GAEzC,IADL/B,EACI,EADJA,aAAcgC,EACV,EADUA,YAAaC,EACvB,EADuBA,SAE3B,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAsCV,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAgDZ,oBAAS,GAAzD,mBAAOa,EAAP,KAAyBC,EAAzB,KACMC,EAAe,6BAgErB,OACE,uBAAM,UAAQ,iBAAiBC,SArCZ,SAACC,GAGpB,GAFAA,EAAMC,kBAEDf,IAASI,IAAUI,EAWtB,OAVKR,GACHG,GAAa,GAGfI,GAAeK,EAAaI,KAAKZ,SAEb,KAAhBI,GACFG,GAAoB,IAMxB,IAAMM,EAAa,CACjBjD,GAAI,EACJkD,OAAQvD,EAAaK,GACrBgC,OACAI,QACAnB,KAAMuB,GAGRT,GAAiB,GC1DQ,SAAC,GAIxB,IAFFmB,EAEC,EAFDA,OAAQlB,EAEP,EAFOA,KAAMI,EAEb,EAFaA,MAAOnB,EAEpB,EAFoBA,KAGvB,OAAOQ,EAAqB,YAAa,CACvCyB,SAAQlB,OAAMI,QAAOnB,SDsDrBkC,CAAcF,GACX5B,MAAK,SAAA+B,GACJzB,GAAY,SAAA0B,GAAe,4BAAQA,GAAR,CAAyBD,OACpDX,EAAe,OAEhBa,OAAM,kBAAM1B,GAAS,MACrB2B,SAAQ,kBAAMxB,GAAiB,OAIlC,UACE,sBAAKlC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ2D,QAAQ,sBAAjC,yBAIA,sBAAK3D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL8B,KAAK,OACLhC,GAAG,sBACHyD,YAAY,eACZ5D,UAAWM,IAAW,QAAS,CAAE,YAAa+B,IAC9CwB,MAAO1B,EACP2B,SA7ES,SAACb,GAClBX,GAAa,GACbF,EAAQa,EAAMc,OAAOF,UA8Ef,sBAAM7D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdqC,GACC,sBACErC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqC,GACC,mBAAGrC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ2D,QAAQ,uBAAjC,0BAIA,sBAAK3D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL8B,KAAK,QACLhC,GAAG,uBACHyD,YAAY,iBACZ5D,UAAWM,IAAW,QAAS,CAAE,YAAamC,IAC9CoB,MAAOtB,EACPuB,SA7GU,SAACb,GACnBP,GAAc,GACdF,EAASS,EAAMc,OAAOF,UA8GhB,sBAAM7D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdyC,GACC,sBACEzC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlByC,GACC,mBAAGzC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ2D,QAAQ,eAAjC,0BAIA,qBAAK3D,UAAU,UAAf,SACE,0BACEG,GAAG,eACHgC,KAAK,OACLyB,YAAY,oBACZ5D,UAAWM,IACT,WACA,CAAE,YAAauC,IAEjBgB,MAAOlB,EACPmB,SA/IgB,SAACb,GACzBH,GAAoB,GACpBF,EAAeK,EAAMc,OAAOF,YAiJvBhB,GACC,mBAAG7C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IACT,iBACA,CAAE,aAAc2B,IAJpB,mBAWF,qBAAKjC,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QAvKU,WAGlB+B,GAAa,GACbI,GAAc,GACdI,GAAoB,GACpBV,EAAQ,IACRI,EAAS,IACTI,EAAe,KA4JT,4BEzLGoB,EAA+B,SAAC,GAGtC,IAFLC,EAEI,EAFJA,kBAAmBC,EAEf,EAFeA,MAAOnC,EAEtB,EAFsBA,SAAUjC,EAEhC,EAFgCA,aAAcqE,EAE9C,EAF8CA,SAAUrC,EAExD,EAFwDA,YAC5DsC,EACI,EADJA,WAAYC,EACR,EADQA,cAENC,EAAe,SAACC,GACpBzC,GAAY,SAAA0B,GAAe,OAAIA,EAAgBgB,QAC7C,SAAAC,GAAc,OAAIA,EAAetE,KAAOoE,QDGjB,SAACA,GAC5B,OAAO3C,EAAA,oBAA2B2C,ICDhCG,CAAcH,GACXd,OAAM,kBAAM1B,GAAS,OAG1B,OACE,sBAAK/B,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOF,EAAaK,GADpB,aAC2BL,EAAaM,SAGxC,mBAAG,UAAQ,WAAX,SACGN,EAAasB,UAIlB,sBAAKpB,UAAU,QAAf,UACGiE,GACC,cAAC,EAAD,KAEAA,GAAqBC,GACrB,qBAAKlE,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKAiE,IAAsBC,GAA6B,IAApBC,EAASQ,QACxC,mBAAG3E,UAAU,aAAa,UAAQ,oBAAlC,8BAKAiE,IAAsBC,GAA6B,IAApBC,EAASQ,QACxC,qCACE,mBAAG3E,UAAU,aAAb,uBAECmE,EAASlE,KAAI,SAAA2E,GAAO,OACnB,0BACE5E,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAG6E,KAAI,iBAAYD,EAAQrC,OAAS,UAAQ,gBAA5C,SACGqC,EAAQzC,OAEX,wBACE,UAAQ,gBACR9B,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAM+D,EAAaM,EAAQzE,KALtC,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACG4E,EAAQxD,SAlBNwD,EAAQzE,WAyBnB8D,IAAsBC,GAASE,IAAetE,GAC9C,wBACE,UAAQ,qBACRO,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAM8D,EAAcvE,IAJ/B,iCAWFmE,IAAsBC,GAASE,IAAetE,GAC9C,cAAC,EAAD,CACEA,aAAcA,EACdgC,YAAaA,EACbC,SAAUA,QClGP+C,EAAgC,SAAC,GAEvC,IADLC,EACI,EADJA,MAAOC,EACH,EADGA,aAAcC,EACjB,EADiBA,gBAErB,EAAgDjD,oBAAS,GAAzD,mBAAOkD,EAAP,KAAyBC,EAAzB,KACMC,EAAcC,iBAAO,MAE3BC,qBAAU,WACR,IAAMC,EAAqB,SAACtC,GACtBmC,EAAYI,UACTJ,EAAYI,QACdC,SAASxC,EAAMc,SAClBoB,GAAoB,IAMxB,OAFAO,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,MAEvC,IAaH,OACE,sBACE,UAAQ,eACRvF,UAAWM,IAAW,WAAY,CAAE,YAAa4E,IACjDW,IAAKT,EAHP,UAKE,qBAAKpF,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAvBe,WACrB4E,GAAqBD,IAiBjB,UAOE,+BACGF,EACCA,EAAa7C,KAEb,kBAIJ,sBAAMnC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgB2F,KAAK,OAAvD,SACE,qBAAK9F,UAAU,mBAAf,SACG+E,EAAM9E,KAAI,SAAA8F,GAAI,OACb,mBAEElB,KAAI,gBAAWkB,EAAK5F,IACpBH,UAAWM,IACT,gBACA,CAAE,YAAa0E,IAAiBe,IAElCxF,QAAS,kBA7CI,SACvBwF,GAEAd,EAAgBc,GAChBZ,GAAoB,GAyCKa,CAAiBD,IAPlC,SASGA,EAAK5D,MARD4D,EAAK5F,eC5DX8F,EAAgB,WAC3B,MAA0BjE,mBAAiB,IAA3C,mBAAO+C,EAAP,KAAcmB,EAAd,KACA,EAA0BlE,mBAAiB,IAA3C,mBAAOnC,EAAP,KAAcsG,EAAd,KACA,EAA0CnE,oBAAS,GAAnD,mBAAOoE,EAAP,KAAsBC,EAAtB,KACA,EAAwCrE,mBAAsB,MAA9D,mBAAOgD,EAAP,KAAqBC,EAArB,KACA,EAAwCjD,mBAAsB,MAA9D,mBAAOlC,EAAP,KAAqBC,EAArB,KACA,EAA4CiC,oBAAS,GAArD,mBAAOsE,EAAP,KAAuBC,EAAvB,KACA,EAAkDvE,oBAAS,GAA3D,mBAAOiC,EAAP,KAA0BuC,EAA1B,KACA,EAAgCxE,mBAAoB,IAApD,mBAAOmC,EAAP,KAAiBrC,EAAjB,KACA,EAAgDE,oBAAS,GAAzD,mBAAOyE,EAAP,KAAyBC,EAAzB,KACA,EAAoC1E,mBAAsB,MAA1D,mBAAOoC,EAAP,KAAmBC,EAAnB,KAuCA,OArCAiB,qBAAU,WHrBH1D,EAAmB,UGuBrBJ,KAAK0E,GACLzC,OAAM,iBAAM,uBACd,IAEH6B,qBAAU,WHxBY,IAACnF,EGyBrBkG,GAAiB,GACbrB,IACFuB,GAAkB,IH3BCpG,EG4BV6E,EAAa7E,GH3BnByB,EAAA,wBAAoCzB,KG4BpCqB,MAAK,SAAAmF,GACJ7E,EAAY,IACZ/B,EAAgB,MAChBoG,EAASQ,MAEVlD,OAAM,WACL4C,GAAiB,MAElB3C,SAAQ,kBAAM6C,GAAkB,SAEpC,CAACvB,IAEJM,qBAAU,WHrCe,IAACnF,EGsCxBuG,GAAoB,GACpBrC,EAAc,MACVvE,IACF0G,GAAqB,IHzCCrG,EG0CVL,EAAaK,GHzCtByB,EAAA,2BAA0CzB,KG0C1CqB,KAAKM,GACL2B,OAAM,WACLiD,GAAoB,MAErBhD,SAAQ,kBAAM8C,GAAqB,SAEvC,CAAC1G,IAGF,sBAAME,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE+E,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,MAIrB,sBAAKjF,UAAU,QAAQ,UAAQ,cAA/B,WACIgF,GACA,mBAAG,UAAQ,iBAAX,8BAKDsB,GACC,cAAC,EAAD,IAGDtB,IAAiBsB,GAAkBF,GAClC,qBACEpG,UAAU,yBACV,UAAQ,oBAFV,mCAQDgF,IAAiBsB,IAAmBF,GACjB,IAAjBvG,EAAM8E,QACP,cAAC,EAAD,CACE9E,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,IAIpBiF,IAAiBsB,IAAmBF,GACjB,IAAjBvG,EAAM8E,QACP,qBACE3E,UAAU,0BACV,UAAQ,aAFV,kCAWR,qBACE,UAAQ,UACRA,UAAWM,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBR,IAPvB,SAUE,qBAAKE,UAAU,gCAAf,SACGF,GACC,cAAC,EAAD,CACEA,aAAcA,EACdmE,kBAAmBA,EACnBC,MAAOuC,EACP1E,SAAU2E,EACVvC,SAAUA,EACVrC,YAAaA,EACbsC,WAAYA,EACZC,cAAeA,gBCxIjCuC,IAASC,OACP,cAAC,EAAD,IACAnB,SAASoB,eAAe,W","file":"static/js/main.ecd8ac5d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPost, setSelectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button is-link',\n                  { 'is-light': selectedPost !== post },\n                )}\n                onClick={() => (\n                  selectedPost === post\n                    ? setSelectedPost(null)\n                    : setSelectedPost(post)\n                )}\n              >\n                {selectedPost === post ? (\n                  'Close'\n                ) : (\n                  'Open'\n                )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { createComment } from '../api/api';\n\ntype Props = {\n  selectedPost: Post;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setError: (v: boolean) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost, setComments, setError,\n}) => {\n  const [loadingSubmit, setLoadingSubmit] = useState(false);\n  const [name, setName] = useState('');\n  const [errorName, setErrorName] = useState(false);\n  const [email, setEmail] = useState('');\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [commentBody, setCommentBody] = useState('');\n  const [errorCommentBody, setErrorCommentBody] = useState(false);\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorName(false);\n    setName(event.target.value);\n  };\n\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorEmail(false);\n    setEmail(event.target.value);\n  };\n\n  const handleCommentBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setErrorCommentBody(false);\n    setCommentBody(event.target.value);\n  };\n\n  const handleReset = (\n    // event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    setErrorName(false);\n    setErrorEmail(false);\n    setErrorCommentBody(false);\n    setName('');\n    setEmail('');\n    setCommentBody('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name || !email || !commentBody) {\n      if (!name) {\n        setErrorName(true);\n      }\n\n      setErrorEmail(!emailPattern.test(email));\n\n      if (commentBody === '') {\n        setErrorCommentBody(true);\n      }\n\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      postId: selectedPost.id,\n      name,\n      email,\n      body: commentBody,\n    };\n\n    setLoadingSubmit(true);\n\n    createComment(newComment)\n      .then(gettedComment => {\n        setComments(currentComments => [...currentComments, gettedComment]);\n        setCommentBody('');\n      })\n      .catch(() => setError(true))\n      .finally(() => setLoadingSubmit(false));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errorName })}\n            value={name}\n            onChange={handleName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errorEmail })}\n            value={email}\n            onChange={handleEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': errorCommentBody },\n            )}\n            value={commentBody}\n            onChange={handleCommentBody}\n          />\n        </div>\n\n        {errorCommentBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': loadingSubmit },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const createComment = (\n  {\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComment } from '../api/api';\n\ntype Props = {\n  selectedPost: Post;\n  isLoadingComments: boolean;\n  error: boolean;\n  setError: (v: boolean) => void;\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  activeForm: Post | null;\n  setActiveForm: (v: Post | null) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isLoadingComments, error, setError, selectedPost, comments, setComments,\n  activeForm, setActiveForm,\n}) => {\n  const handleDelete = (commentId: number) => {\n    setComments(currentComments => currentComments.filter(\n      currentComment => currentComment.id !== commentId,\n    ));\n\n    deleteComment(commentId)\n      .catch(() => setError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost.id}: ${selectedPost.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {isLoadingComments && (\n          <Loader />\n        )}\n        {!isLoadingComments && error && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {!isLoadingComments && !error && comments.length === 0 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {!isLoadingComments && !error && comments.length !== 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDelete(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {!isLoadingComments && !error && activeForm !== selectedPost && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setActiveForm(selectedPost)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n\n      {!isLoadingComments && !error && activeForm === selectedPost && (\n        <NewCommentForm\n          selectedPost={selectedPost}\n          setComments={setComments}\n          setError={setError}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (v: User | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, setSelectedUser,\n}) => {\n  const [isActiveDropdown, setIsActiveDropdown] = useState(false);\n  const dropdownRef = useRef(null);\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (dropdownRef.current\n        && !(dropdownRef.current as HTMLElement)\n          .contains(event.target as Node)) {\n        setIsActiveDropdown(false);\n      }\n    };\n\n    document.addEventListener('click', handleOutsideClick);\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  const toggleDropdown = () => {\n    setIsActiveDropdown(!isActiveDropdown);\n  };\n\n  const handleSelectUser = (\n    user: User,\n  ) => {\n    setSelectedUser(user);\n    setIsActiveDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActiveDropdown })}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser === user },\n              )}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getComments, getPosts, getUsers } from './api/api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errorGetPosts, setErrorGetPosts] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [errorGetComments, setErrorGetComments] = useState(false);\n  const [activeForm, setActiveForm] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => 'Error get Users');\n  }, []);\n\n  useEffect(() => {\n    setErrorGetPosts(false);\n    if (selectedUser) {\n      setIsLoadingPosts(true);\n      getPosts(selectedUser.id)\n        .then(gettedPosts => {\n          setComments([]);\n          setSelectedPost(null);\n          setPosts(gettedPosts);\n        })\n        .catch(() => {\n          setErrorGetPosts(true);\n        })\n        .finally(() => setIsLoadingPosts(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setErrorGetComments(false);\n    setActiveForm(null);\n    if (selectedPost) {\n      setIsLoadingComments(true);\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => {\n          setErrorGetComments(true);\n        })\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {selectedUser && !isLoadingPosts && errorGetPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && !isLoadingPosts && !errorGetPosts\n                && posts.length !== 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n\n                {selectedUser && !isLoadingPosts && !errorGetPosts\n                && posts.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isLoadingComments={isLoadingComments}\n                  error={errorGetComments}\n                  setError={setErrorGetComments}\n                  comments={comments}\n                  setComments={setComments}\n                  activeForm={activeForm}\n                  setActiveForm={setActiveForm}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}